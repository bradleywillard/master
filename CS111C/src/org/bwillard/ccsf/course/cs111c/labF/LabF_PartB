Part B: Big Data (20 Points)

Use the BinarySaarchTreeWithDups class to process a big data file.

    The data file is a list of San Francisco police incident reports for Larceny/Theft from 2003 to the present (downloaded from https://data.sfgov.org/Public-Safety/SFPD-Incidents-from-1-January-2003/tmnf-yvry)
        There are over 370,000 records in the file. 
    I have provided two classes to process the file:
        PoliceReport represents a single report.
        ReportProcessor reads in the data file, creates a tree, and then uses the getAllEnrties method to create lists that match certain criteria.
            In eclipse, place this file one folder above the src/bin folders. 
    Review these files to become familiar with how they work.
        At first, PoliceReport objects are compared/ordered by date (represented as a String). Two reports with the same date are considered "the same." You can see this in the equals and compareTo methods of the PoliceReport class.
            Later, you will change this so that reports are compared/ordered by day of the week and incident number.
        Note: I use a somewhat clunky/hacked method of identifying search criteria (creating a "dummyRecord" with only a single criteria on which to match). The proper way to do this would be to use Comparator objects or, better yet, the new Java 8 methods of filtering and matching streams. However, these programming concepts are beyond what you are expected to know for our course, so I used the more simpler (but rather inelegant!) approach. Please do not take this as an endorsement of this approach!
    Run and modify these files as described below and submit written answers to the following 7 questions.

    Run the ReportProcessor.
        Q1: How long did it take to build the tree?
		Binary tree complete!
		Time required to build tree: 4644 milliseconds
        Q2. For each of the 6 dates, list the number of incidents, the time it took to find those incidents using the tree, and the time it took to find those using the list.
		There were 72 incidents on 1/1/2003.
		Time required to gather reports from tree: 0 milliseconds.
		Time required to gather reports from list: 52 milliseconds.

		There were 53 incidents on 3/17/2004.
		Time required to gather reports from tree: 0 milliseconds.
		Time required to gather reports from list: 61 milliseconds.

		There were 59 incidents on 7/4/2005.
		Time required to gather reports from tree: 0 milliseconds.
		Time required to gather reports from list: 48 milliseconds.

		There were 70 incidents on 10/31/2006.
		Time required to gather reports from tree: 0 milliseconds.
		Time required to gather reports from list: 52 milliseconds.

		There were 44 incidents on 12/25/2007.
		Time required to gather reports from tree: 0 milliseconds.
		Time required to gather reports from list: 36 milliseconds.

		There were 74 incidents on 6/8/2008.
		Time required to gather reports from tree: 0 milliseconds.
		Time required to gather reports from list: 29 milliseconds.

    In the ReportProcessor, comment out Part B-1. Un-comment Part B-2. In the PoliceReport file, comment out the two methods in Part B-1 and uncomment out the two methods in Part B-2.
        You are now comparing and ordering reports by incident number. Incident numbers are unique, so there will no longer be duplicates in your tree.
    Run the Report Processor.
        Note: if you get an error, go back and make sure you made the changes in commented code in both the PoliceReport and ReportProcessor files.
        Q3: How long did it take to build the tree? 
		Binary tree complete!
		Time required to build tree: 567 milliseconds
	Why do you think was it faster/slower than in Q1?
            Hint: think about balance and depth/structure! Consider completing the extra credit now- it might help you answer this question!
		Faster due to big differences in tree depth. 
		The height of the left and right subtrees was only:
			Height of left subtree : 43
			Height of right subtree : 44
		as opposed to B-1 where:
			Height of left subtree : 193
			Height of right subtree : 188
		
        Q4. For each of the 10 incident reports, list the time it took to find the report using the tree and the time it took to find the report using the list. 
		Report: Incident #146099872	
		Time required to find report from tree: 0 milliseconds.
		Time required to find report from list: 15 milliseconds.

	Report: Incident #120818402	
		Time required to find report from tree: 0 milliseconds.
		Time required to find report from list: 10 milliseconds.

	Report: Incident #116012177
		Time required to find report from tree: 0 milliseconds.
		Time required to find report from list: 2 milliseconds.

	Report: Incident #126006201	
		Time required to find report from tree: 0 milliseconds.
		Time required to find report from list: 3 milliseconds.

	Report: Incident #156096012
		Time required to find report from tree: 0 milliseconds.
		Time required to find report from list: 5 milliseconds.

	Report: Incident #141055619
		Time required to find report from tree: 0 milliseconds.
		Time required to find report from list: 4 milliseconds.

	Report: Incident #150902821
		Time required to find report from tree: 0 milliseconds.
		Time required to find report from list: 4 milliseconds.

	Report: Incident #76083890
		Time required to find report from tree: 0 milliseconds.
		Time required to find report from list: 3 milliseconds.

	Report: Incident #106129243
		Time required to find report from tree: 0 milliseconds.
		Time required to find report from list: 2 milliseconds.

	Report: Incident #146081158
		Time required to find report from tree: 0 milliseconds.
		Time required to find report from list: 4 milliseconds.

    In the ReportProcessor, comment out Part B-2. Un-comment Part B-3. In the PoliceReport file, comment out the two methods in Part B-2 and uncomment out the two methods in Part B-3.
        You are now comparing and ordering reports by day of the week.
    Run the ReportProcessor.

        Q5: How long did it take to build the tree? 
		Binary tree complete!
			Time required to build tree: 357187 milliseconds.  So much slower.  A good 5-7 minutes
	Why do you think was it faster/slower than in Q1?
		It takes several minutes to build the tree.  We changed the equals and compareTo methods to sort by day of week, which gives us 7 buckets to sort
		all incidents into.  When there are fewer buckets, there are more items to compare to.  Hence, we're having to sort more items 
		into fewer buckets and the time it takes to do that increases as we add more items, which explains why it runs faster 
		in the beginning and slowest toward the end.

        Q6. For each of the 7 days of the week, list the time it took to find those incidents using the tree and the time it took to find those incidents using the list. 
		There were 51196 incidents on Sunday.
		Time required to gather reports from tree: 18 milliseconds.
		Time required to gather reports from list: 44 milliseconds.

		There were 49486 incidents on Monday.
		Time required to gather reports from tree: 4 milliseconds.
		Time required to gather reports from list: 47 milliseconds.

		There were 51263 incidents on Tuesday.
		Time required to gather reports from tree: 5 milliseconds.
		Time required to gather reports from list: 20 milliseconds.

		There were 52152 incidents on Wednesday.
		Time required to gather reports from tree: 4 milliseconds.
		Time required to gather reports from list: 13 milliseconds.

		There were 52441 incidents on Thursday.
		Time required to gather reports from tree: 4 milliseconds.
		Time required to gather reports from list: 13 milliseconds.

		There were 57693 incidents on Friday.
		Time required to gather reports from tree: 4 milliseconds.
		Time required to gather reports from list: 12 milliseconds.

		There were 57633 incidents on Saturday.
		Time required to gather reports from tree: 3 milliseconds.
		Time required to gather reports from list: 13 milliseconds.
	
	Why do you think it was faster/slower than in Q2?
	 	Hint: think again about balance and depth/structure! 
		
		No significant difference in time, only a few milliseconds, 0 compared to 3-4 for the tree.  Regardless of sorting, we need to traverse
		the tree and retrieve 50K+ items per bucket.
       
    In the ReportProcessor, comment out the line marked "??? ITERATIVE" and un-comment out the line marked "??? RECURSIVE."
    Run the Report Processor.
        Q7: What happens? The number of elements in the tree has not changed. So why does this happen?
		No significant change.

Extra Credit (20 Points)

Write a calculateLeftHeight and calculateRightHeight method in BinarySearchTreeWithDups. These methods calculate the height of the left and right subtrees (from the root). You can use recursion or iteration- it is your choice.

Re-run Part B-1 and B-2. List the left and right height of the trees created with these two different ways of comparing/ordering the reports.

B-1 : 
Height of left subtree : 193
Height of right subtree : 188

B-2 : 
Height of left subtree : 43
Height of right subtree : 44

